#!/usr/bin/env python3

import argparse
import os
import readline
import shutil  # for get_terminal_size
import sys
import syslog

from os.path import exists
from syslog import syslog as log

parser = argparse.ArgumentParser()
parser.add_argument('--doom-path',
  type=str, required=True,
  help='Path to an unpacked DoomRL installation')
parser.add_argument('--data-path',
  type=str, required=False,
  default=os.path.dirname(os.path.realpath(__file__)),
  help='Path to doomrl-server readonly data files; defaults to same location as `doomrl-server` script')
parser.add_argument(
  '--user-path',
  type=str, required=True,
  help='Path to store player data and generated website in')

syslog.openlog('doomrl-server', facility=syslog.LOG_DAEMON)
log('Loading...')

import doomrl

# DoomRL loads score.wad and player.wad on startup, holds them in memory for its
# entire run, and writes them out on exit.
# Score.wad is a gzipped XML file containing the scores. It starts with a CRC,
# and if this CRC is incorrect, will attempt to restore score.wad from backup
# or, failing that, erase it and start over. So merging score.wad is a no-go
# unless we can reverse engineer the CRC. It looks the right size to be md5.

def resetTerm():
  # 'tput reset' on xterm sends this:
  # '\x1Bc\x1B[!p\x1B[?3;4l\x1B[4l\x1B>'
  # ESC c        : full reset
  # CSI ! p      : soft terminal reset
  # CSI ? 3;4 l  : 80 column mode; fast scrolling
  # CSI 4 l      : reset replace mode
  # ESC >        : normal keypad mode
  # Of these we probably only need the first two.
  os.write(1, '\x1Bc\x1B[!p'.encode('ascii'))

# from commands import Command
# from commands import RegisterCommand

from commands import argsplit, run_command

def sighup(sig, frame):
  """Signal handler for SIGHUP, which is raised when the user disconnects suddenly."""
  # TODO: clean up half-created user directories.

  if doomrl.user():
    # If we got interrupted while the player was actually in DoomRL, there's a
    # ttyrec file. We could try recovering it, but DoomRL's crash recovery is
    # so unreliable that we probably can't match it up to a save file or
    # scoreline, so we might as well just delete it.
    try:
      os.remove(doomrl.homepath('ttyrec'))
    except:
      pass


def main(args):
  from signal import signal,SIGHUP
  signal(SIGHUP, sighup)

  doomrl.init(
    doom=args.doom_path,
    data=args.data_path,
    home=args.user_path)

  print(open(doomrl.datapath('motd')).read())

  (cols, rows) = shutil.get_terminal_size()
  min_rows = 26 if exists(doomrl.datapath('ttysound', 'libSDL_mixer-1.2.so.0')) else 25
  if int(rows) == 0 and int(cols) == 0:
    print("Warning: couldn't detect terminal size. Please make sure your terminal"
          " is at least 80x%d or the game will not display correctly." % min_rows)
  elif int(rows) < min_rows or int(cols) < 80:
    print("Warning: your terminal size (%sx%s) is smaller than the 80x%d"
          " needed by DoomRL. The game will not display correctly."
          % (cols, rows, min_rows))

  while True:
    try:
      if exists(doomrl.datapath('maintenance')):
        print(open(doomrl.datapath('maintenance')).read())
        sys.exit(0)
      [cmd, args] = argsplit(input('\n%s> ' % (doomrl.user() or 'guest')).strip())
      if not cmd:
        pass
      elif cmd == 'quit' or cmd == 'exit':
        break
      else:
        run_command(cmd, args)
    except EOFError as e:
      break
    except KeyboardInterrupt:
      pass
    except Exception as e:
      import traceback
      log('Unhandled exception in mainloop: ' + traceback.format_exc())
      resetTerm()
      print('\rError in mainloop: %s' % str(e))
      traceback.print_exc()

  if doomrl.user():
    log('User %s logged out.' % doomrl.user())
  print('Goodbye!')

if __name__ == '__main__':
  main(parser.parse_args())
